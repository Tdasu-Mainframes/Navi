/* REXX */
/* SOCKS5 REXX PROXY */
/* ex 'jake.rexx(navisock)' '172.16.9.10 1080'*/
/* ex 'jake.navisock' '172.16.9.10 1080 JAKE PASS'*/

/* netcat and send a new line to turn it off */

/* TODO BIND Proxy */
/* TODO test IPV6 */
/* TODO other auth */

trace o
signal on syntax
signal on halt

VER = '05'
GENERIC_SUCCESS = VER'00'
GENERIC_FAILURE = VER'01'
RSV = '00'

/* METHODS */
NO_AUTH = '00'
USER_PASS = '02'
NO_ACCEPTABLE = 'FF'


/* CMDS */
CONNECT = '01'
BIND = '02'
UDP_ASSOCIATE = '03'

/* ATYP */
IPV4 = '01'
DOMAIN = '03'
IPV6 = '04'

/* REP */
SUCCESS = '00'
FAILURE = '01'
COMMAND_NOT_SUPPORTED = '07'

/* Parse Arguments */
parse arg ipaddress local_port username password
if words(arg(1)) /= 2 & words(arg(1)) /= 4 then
  do
    say "Pass two arguments, ip address and port, to bind SOCKS5 proxy to"
    say "Pass four arguments, username and password, to enable auth"
    exit(0)
  end
if words(arg(1)) == 2 then accept_meth = NO_AUTH
else
  do
    accept_meth = USER_PASS
  end


/* Initialize                                                         */
say "Starting Socks5 Rexx Server"
call Socket 'Initialize', 'Socks'

/* Initialize for accepting connection requests                       */
s = Socket('Socket','AF_INET','STREAM')
call Socket 'Setsockopt', s, 'SOL_SOCKET', 'SO_REUSEADDR', '1'
call Socket 'Bind', s, 'AF_INET' local_port ipaddress
say "Bound to "ipaddress':'local_port
call Socket 'Listen', s, 10
call Socket 'Ioctl', s, 'FIONBIO', 'ON'


timeout    = 60
wlist = ''

/* Accept connections from clients, receive and send messages     */
do forever
  call get_event
  select
    when event='SOCKET' then
      do
        parse var rest keyword ts .
        select
          when ts==s & keyword='READ' then call accept_new_socket
          when ts/=s & keyword='READ' then call read_data
          when ts/=s & keyword='WRITE' then call connect_confirm
        end
      end
    otherwise nop
  end
end
return 0

/* Wait for an event                                                */
get_event:
if wlist^='' then sockevtlist = 'Write'wlist 'Read * Exception'
else sockevtlist = 'Write Read * Exception'
sellist = Socket('Select',sockevtlist,timeout)
parse upper var sellist . 'READ' orlist 'WRITE' owlist 'EXCEPTION' .
if orlist^='' | owlist^='' then
  do
    event = 'SOCKET'
    if orlist^='' then
      do
        parse var orlist orsocket .
        rest = 'READ' orsocket
      end
    else
      do
        parse var owlist owsocket .
        rest = 'WRITE' owsocket
      end
  end
else event = 'TIME'
return 0

shut_it_down:
call Socket 'Close'
say 'Socks: Closed'
call Socket 'Terminate'
say 'Socks: Terminated'
exit 0

accept_new_socket:
/* Accept new connections from clients                          */
nsn = Socket('Accept',s)
if src=0 then
  do
    parse var nsn ns . np nia .
    say 'Connected by' nia 'on port' np 'and socket' ns
    call Socket 'Setsockopt', ns, 'SOL_SOCKET', 'SO_ASCII', 'OFF'
    call Socket 'Setsockopt', ns, 'SOL_SOCKET', 'SO_EBCDIC', 'OFF'
    call Socket 'Ioctl', ns, 'FIONBIO', 'ON'
    auth_progress.ns = 0
  end
return 0

send_socks:
socket = arg(1)
socket_data = arg(2)
call Socket 'Send',socket,x2c(socket_data)
return 0

/* Parses Socks5 Protocol https://tools.ietf.org/html/rfc1928 */
read_data:
hex = data_to_hex()
if src=0 & length(hex) > 0 then
  do
    select
      when auth_progress.ts==0 then call parse_method
      when auth_progress.ts==1 then call user_pass_subneg
      when auth_progress.ts==2 then call parse_cmd
      when auth_progress.ts==3 then call send_socks pair.ts,hex
      when auth_progress.ts==4 then call parse_udp
      otherwise nop
    end
  end
else
  do
    call Socket 'Close',ts
    say 'Disconnected socket' ts
    call delsock ts
    if pair.ts > 0 then
      do
        call Socket 'Close',pair.ts
        say 'Disconnected socket' pair.ts
        call delsock pair.ts
      end
  end
return 0

/* Cant use words for the data as it can have spaces in it */
data_to_hex:
data = Socket('Recv',ts)
len = word(data,1)
if len==0 then return ""
else
  do
    full_hex = c2x(data)
    post_len = (pos('40'X,data) * 2) + 1
    hex = substr(full_hex,post_len)
    return hex
  end
return 0

/* Only NO_AUTH and USER_PASS implemented */
parse_method:
/* sample 050100 05020001 */
if length(hex) < 4 then call shut_it_down
hex_ver = substr(hex,1,2)
hex_nmeth = substr(hex,3,2)
nmeth = x2d(hex_nmeth)
hex_meth = substr(hex,5,2*nmeth)
success = 0
do i = 1 to nmeth
  a_meth = substr(hex_meth,(i * 2)-1,2)
  if accept_meth == a_meth then
    do
      if a_meth == NO_AUTH then auth_progress.ts = 2
      else auth_progress.ts=1
      call send_socks ts,VER''a_meth
    end
end
return 0

user_pass_subneg:
hex_ver = substr(hex,1,2)
hex_ulen = substr(hex,3,2)
ulen = x2d(hex_ulen)
hex_uname =  substr(hex,5,2*ulen)
uname = ouput_ascii(hex_uname)
hex_plen = substr(hex,2*ulen + 5,2)
plen = x2d(hex_plen)
hex_passwd =  substr(hex,2*ulen + 7,2*plen)
passwd = ouput_ascii(hex_passwd)
if username == uname & password == passwd then
  do
    auth_progress.ts=2
    call send_socks ts,'0100'
  end
else
  do
    call send_socks ts,'0101'
    call Socket 'Close',ts
  end
return 0

parse_cmd:
/* sample 05010001c0a8018a1f40*/
hex_ver = substr(hex,1,2)
hex_cmd = substr(hex,3,2)
hex_rsv = substr(hex,5,2)
data_start =  parse_address(7)
select
  when hex_cmd==CONNECT then call connect
  when hex_cmd==BIND then call send_socks ts,VER''COMMAND_NOT_SUPPORTED
  when hex_cmd==UDP_ASSOCIATE then call udp_associate
  otherwise call send_socks ts,VER''COMMAND_NOT_SUPPORTED
end
return 0

connect:
connect_sock = Socket('Socket','AF_INET','STREAM')
call Socket 'Ioctl', connect_sock, 'FIONBIO', 'ON'
say "Connecting to" dst_addr":"dst_port "with Socket:"connect_sock
call Socket 'Connect', connect_sock, 'AF_INET' dst_port dst_addr
call addsock(connect_sock)
auth_progress.connect_sock = 3
auth_progress.ts = 3
pair.ts = connect_sock
pair.connect_sock = ts
return 0

connect_confirm:
say "Connection Success"
call send_socks pair.ts,GENERIC_SUCCESS''substr(hex,5)
call delsock ts
return 0

udp_associate:
/* Initialize for accepting connection requests                       */
udp_socket = Socket('Socket','AF_INET','DATAGRAM')
call Socket 'Setsockopt', udp_socket, 'SOL_SOCKET', 'SO_REUSEADDR', '1'
call Socket 'Bind', udp_socket, 'AF_INET' local_port ipaddress
say "UDP Associate Bound to "ipaddress':'local_port
call Socket 'Listen', udp_socket, 10
call Socket 'Ioctl', udp_socket, 'FIONBIO', 'ON'
auth_progress.udp_socket = 4
call send_socks ts,GENERIC_SUCCESS''substr(hex,5)
return 0

parse_udp:
/* sample 00000001AC10003604D2544553540A */
hex_ver = substr(hex,1,4)
hex_frag = substr(hex,5,2)
data_start = parse_address(7)
hex_data = substr(hex,data_start)

udp_send_socket = Socket('Socket','AF_INET','DATAGRAM')
call Socket 'Ioctl', udp_send_socket, 'FIONBIO', 'ON'
say "Connecting to" dst_addr":"dst_port "with Socket:"udp_send_socket
call Socket 'Connect', udp_send_socket, 'AF_INET' dst_port dst_addr
call send_socks udp_send_socket,hex_data
return 0

/* Takes a start of the hex string and returns the end date */
/* Creates dst_addr and dst_port */
parse_address:
start = arg(1)
hex_atyp = substr(hex,start,2)
if hex_atyp == IPV4 then
  do
    do i = 1 to 4
      hex_dst_addr.i = substr(hex,start + (i * 2),2)
      dst_addr.i = x2d(hex_dst_addr.i)
    end
    dst_addr = dst_addr.1'.'dst_addr.2'.'dst_addr.3'.'dst_addr.4
    hex_dst_port = substr(hex,start + 10,4)
    dst_port = x2d(hex_dst_port)
    return start + 14
  end
if hex_atyp == IPV6 then
  do
    do i = 1 to 8
      hex_dst_addr.i = substr(hex,start - 2 + (i * 4),4)
      dst_addr.i = x2d(hex_dst_addr.i)
    end
    dst_addr = dst_addr.1':'dst_addr.2':'dst_addr.3':'dst_addr.4||,
            ':'dst_addr.5':'dst_addr.6':'dst_addr.7':'dst_addr.8
    hex_dst_port = substr(hex,start + 34,4)
    dst_port = x2d(hex_dst_port)
    say dst_addr
    say dst_port
    return start + 38
  end
if hex_atyp == DOMAIN then
  do
    hex_octlet_length = substr(hex,start + 2,2)
    octlet_length = x2d(hex_octlet_length)

    hex_dst_addr = substr(hex,start + 4,octlet_length * 2)
    hex_dst_port = substr(hex,start + 4+octlet_length * 2,4)

    dst_addr = ouput_ascii(hex_dst_addr)
    dst_port = x2d(hex_dst_port)
    return start + 8 + octlet_length * 2
  end
return 0

/* Procedure to add a socket to the write socket list                 */
addsock: procedure expose wlist
  s = arg(1)
  p = wordpos(s,wlist)
  if p=0 then wlist = wlist s
return 0

/* Procedure to del a socket from the write socket list               */
delsock: procedure expose wlist
  s = arg(1)
  p = wordpos(s,wlist)
  if p>0 then do
    templist = ''
    do i=1 to words(wlist)
      if i^=p then templist = templist word(wlist,i)
    end
    wlist = templist
  end
return 0

/* Calling the real SOCKET function                                   */
socket: procedure expose initialized src
  a0 = arg(1)
  a1 = arg(2)
  a2 = arg(3)
  a3 = arg(4)
  a4 = arg(5)
  a5 = arg(6)
  a6 = arg(7)
  a7 = arg(8)
  a8 = arg(9)
  a9 = arg(10)
  parse value 'SOCKET'(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9) with src res
return res


/* Syntax error routine                                               */
syntax:
  say 'REXX error' rc 'in line' sigl':' "ERRORTEXT"(rc)
  say "SOURCELINE"(sigl)
  exit(0)

/* Halt exit routine                                                  */
halt:
  call error 'E', 4, '==> REXX Interrupted'
return

/*  Copied from Bit2Char by David Alcock */
ouput_ascii:
arg xstr
nchar = x2c(xstr)

/*
 | CECP 1047 (Extended de-facto EBCDIC) to ISO 8859-1:
 */

toASCII =          '000102039C09867F978D8E0B0C0D0E0F'x  /* 00 */
toASCII = toASCII||'101112139D8508871819928F1C1D1E1F'x  /* 10 */
toASCII = toASCII||'80818283840A171B88898A8B8C050607'x  /* 20 */
toASCII = toASCII||'909116939495960498999A9B14159E1A'x  /* 30 */
toASCII = toASCII||'20A0E2E4E0E1E3E5E7F1A22E3C282B7C'x  /* 40 */
toASCII = toASCII||'26E9EAEBE8EDEEEFECDF21242A293B5E'x  /* 50 */
toASCII = toASCII||'2D2FC2C4C0C1C3C5C7D1A62C255F3E3F'x  /* 60 */
toASCII = toASCII||'F8C9CACBC8CDCECFCC603A2340273D22'x  /* 70 */
toASCII = toASCII||'D8616263646566676869ABBBF0FDFEB1'x  /* 80 */
toASCII = toASCII||'B06A6B6C6D6E6F707172AABAE6B8C6A4'x  /* 90 */
toASCII = toASCII||'B57E737475767778797AA1BFD05BDEAE'x  /* A0 */
toASCII = toASCII||'ACA3A5B7A9A7B6BCBDBEDDA8AF5DB4D7'x  /* B0 */
toASCII = toASCII||'7B414243444546474849ADF4F6F2F3F5'x  /* C0 */
toASCII = toASCII||'7D4A4B4C4D4E4F505152B9FBFCF9FAFF'x  /* D0 */
toASCII = toASCII||'5CF7535455565758595AB2D4D6D2D3D5'x  /* E0 */
toASCII = toASCII||'30313233343536373839B3DBDCD9DA9F'x  /* F0 */

/*
 | Hex table to aid in translating all 8-bit characters
 */

hextable =             '000102030405060708090A0B0C0D0E0F'x   /* 00 */
hextable = hextable || '101112131415161718191A1B1C1D1E1F'x   /* 10 */
hextable = hextable || '202122232425262728292A2B2C2D2E2F'x   /* 20 */
hextable = hextable || '303132333435363738393A3B3C3D3E3F'x   /* 30 */
hextable = hextable || '404142434445464748494A4B4C4D4E4F'x   /* 40 */
hextable = hextable || '505152535455565758595A5B5C5D5E5F'x   /* 50 */
hextable = hextable || '606162636465666768696A6B6C6D6E6F'x   /* 60 */
hextable = hextable || '707172737475767778797A7B7C7D7E7F'x   /* 70 */
hextable = hextable || '808182838485868788898A8B8C8D8E8F'x   /* 80 */
hextable = hextable || '909192939495969798999A9B9C9D9E9F'x   /* 90 */
hextable = hextable || 'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'x   /* A0 */
hextable = hextable || 'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'x   /* B0 */
hextable = hextable || 'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'x   /* C0 */
hextable = hextable || 'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'x   /* D0 */
hextable = hextable || 'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'x   /* E0 */
hextable = hextable || 'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'x   /* F0 */

return translate(x2c(xstr),hextable,toASCII)

